"use strict";(self.webpackChunkivanignatiev=self.webpackChunkivanignatiev||[]).push([[518],{4369:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"secrets-in-ds-notebooks","metadata":{"permalink":"/secrets-in-ds-notebooks","source":"@site/blog/note0006-secrets-in-ds-notebooks.md","title":"Note 6: Manage secrets in different notebooks environments","description":"Look to tutorials for Data Engineers and Data Scientists, responses in Stackoverflow. Hardcoded credentials (CWE-798, CWE-259) are everywhere, if not in code, printed in output cell. Risk to push notebook with api-keys to git or a pipeline is very high.","date":"2025-03-29T09:30:00.000Z","tags":[],"readingTime":1.875,"hasTruncateMarker":false,"authors":[{"name":"Ivan Ignatiev","socials":{"x":"https://x.com/ivan_ignatiev","github":"https://github.com/ivanignatiev","linkedin":"https://www.linkedin.com/in/ivan-ignatiev/"},"imageURL":"https://github.com/ivanignatiev.png","key":"ivanignatiev","page":null}],"frontMatter":{"slug":"secrets-in-ds-notebooks","title":"Note 6: Manage secrets in different notebooks environments","authors":"ivanignatiev","tags":[],"date":"2025-03-29T09:30"},"unlisted":false,"nextItem":{"title":"Note 5: Boost Python Pipelines Speed by 3-5x","permalink":"/azure-devops-container-jobs.md"}},"content":"Look to tutorials for Data Engineers and Data Scientists, responses in Stackoverflow. Hardcoded credentials ([CWE-798](https://cwe.mitre.org/data/definitions/798.html), [CWE-259](https://cwe.mitre.org/data/definitions/259.html)) are everywhere, if not in code, printed in output cell. Risk to push notebook with api-keys to git or a pipeline is very high.\\n\\nStatic code analysis tools:\\n\\n- `pynblint` does not detect hardcoded secrets in notebook\\n- `bandit` has limited capabilities and does not fully support `.ipynb` notebooks\\n\\n:::note\\n   I have tested bandit 1.8.3. The same code in `.py` and `.ipynb` cell. The variable with name `API_KEY` and hardcoded value is not detected, `password` variable is detected only in `.py` file ([B105: hardcoded_password_string](https://bandit.readthedocs.io/en/latest/plugins/b105_hardcoded_password_string.html#b105-hardcoded-password-string)).\\n:::\\n\\nAnyway, the challenge for Jupyter Notebooks is possibility to have multiple natures of code in the same notebook, so Python tools are not enough:\\n\\n- `gitleaks`\\n- `detect-secrets` has many false positives and need to be fine-tuned but it looks in the cell\'s code and output\\n\\nMore tools described in [OWASP Security Tools - Secrets Detection Tools section](https://owasp.org/www-community/Free_for_Open_Source_Application_Security_Tools).\\n\\nIssues can be caught during code review. However, file will be distributed across all team members PCs if merged in some shared branch.\\n\\nPublic services like GitHub and some serverless services ([Scanning AWS Lambda functions with Amazon Inspector](https://docs.aws.amazon.com/inspector/latest/user/scanning-lambda.html)) can identify [CWE-798](https://cwe.mitre.org/data/definitions/798.html) but it does not reduce responsibilities of notebooks and code owners.\\n\\n## Local Notebooks\\n\\nUse environment variables, or `dotenv`, or `keyring`, or password inputs (i.e. `getpass`) for passwords and api keys.\\n\\nEnvironment variables example:\\n\\n```python\\nsecret_in_env = os.environ[\'ENVIRONMENT_VARIABLE_WITH_SECRET_NAME\']\\n```\\n\\nDo not print your secret variables, or ensure your cell outputs are clean before committing to `git`.\\n\\nIf you store your secrets in `.env` file, add this file to `.gitignore`.\\n\\n## Google Colab Secrets\\n\\n```python\\nfrom google.colab import userdata\\nsecret_in_env = userdata.get(\'{googleColabSecretName}\')\\n```\\n\\nFigure. Google Colab Secrets:\\n\\n![Google Colab Secrets](/assets/note0006/google-colab-secrets.png)\\n\\n## Databricks\\n\\n`dbutils.secrets.get(scope, key)` for Python:\\n\\n```python\\ndbutils.secrets.list(\'{databricksSecretNamespace}\')\\nusername = dbutils.secrets.get(scope = \\"{databricksSecretNamespace}\\", key = \\"{databricksSecretName}\\")\\n```\\n\\n`secret(scope, key)` for SQL queries:\\n\\n```sql\\nSELECT * FROM list_secrets();\\nSELECT secret(\'{databricksSecretNamespace}\', \'{databricksSecretName}\');\\n```\\n\\n- [Tutorial: Create and use a Databricks secret](https://learn.microsoft.com/en-us/azure/databricks/security/secrets/example-secret-workflow)\\n- [secret function](https://learn.microsoft.com/en-us/azure/databricks/sql/language-manual/functions/secret)\\n\\n## Azure DevOps\\n\\nIn MLOps, ModelOps in pipelines secrets can be stored over Variables Groups. Additionally, Variable Group can be linked to Azure KeyVault.\\n\\nFrom Variables secrets can be populated as environment variables in pipelines.\\n\\nFigure. Azure DevOps Variable Groups:\\n\\n![Azure DevOps Variable Groups](/assets/note0006/azure-devops-variable-groups.png)"},{"id":"azure-devops-container-jobs.md","metadata":{"permalink":"/azure-devops-container-jobs.md","source":"@site/blog/note0005-azure-devops-container-jobs.md","title":"Note 5: Boost Python Pipelines Speed by 3-5x","description":"There\'s no need to install Python dependencies for tests every single time with Microsoft-hosted agents for Azure Pipelines.","date":"2025-03-28T09:30:00.000Z","tags":[],"readingTime":0.875,"hasTruncateMarker":false,"authors":[{"name":"Ivan Ignatiev","socials":{"x":"https://x.com/ivan_ignatiev","github":"https://github.com/ivanignatiev","linkedin":"https://www.linkedin.com/in/ivan-ignatiev/"},"imageURL":"https://github.com/ivanignatiev.png","key":"ivanignatiev","page":null}],"frontMatter":{"slug":"azure-devops-container-jobs.md","title":"Note 5: Boost Python Pipelines Speed by 3-5x","authors":"ivanignatiev","tags":[],"date":"2025-03-28T09:30"},"unlisted":false,"prevItem":{"title":"Note 6: Manage secrets in different notebooks environments","permalink":"/secrets-in-ds-notebooks"},"nextItem":{"title":"Note 4: Azure Boards Backlog Structure","permalink":"/azure-boards-backlog-structure"}},"content":"There\'s no need to install Python dependencies for tests every single time with Microsoft-hosted agents for Azure Pipelines.\\n\\nInstead, run your tests inside containers that have everything pre-installed and preconfigured. This way, the dependency installation time is replaced by the quicker process of pulling a container image.\\n\\nFigure. From dependencies installation in pipeline to using container job.\\n\\n![Boost Python Pipelines Speed by 3-5x](/assets/note0005/faster-pipelines.svg)\\n\\n:::tip Special tip for ModelOps and MLOps: \\n\\nWhen running unit tests, install the CPU-only version of PyTorch. This significantly reduces the image size and accelerates the container pull time.\\n\\n:::\\n\\n\\n## Configure container Jobs in Azure DevOps\\n\\nIn addition to `pool:` job setting add container configuration:\\n\\n```yaml\\npool:\\n    vmImage: ubuntu-latest\\n\\ncontainer:\\n    image: \\"{reference to an image with dependencies installed}\\"\\n    endpoint: \\"{registry Azure DevOps project service connection}\\"\\n```\\n\\n## Install PyTorch CPU only\\n\\nIt will not only accelerate container image building but also it will reduce the size of the container image.\\n\\n```sh\\npip install torch==2.5.1 torchvision==0.20.1 torchaudio==2.5.1 --index-url https://download.pytorch.org/whl/cpu\\n```\\n\\n## References\\n\\n- [Container jobs in YAML pipelines](https://learn.microsoft.com/en-us/azure/devops/pipelines/process/container-phases)\\n- [PyTorch Installation Commands](https://pytorch.org/get-started/previous-versions/)"},{"id":"azure-boards-backlog-structure","metadata":{"permalink":"/azure-boards-backlog-structure","source":"@site/blog/note0004-azure-boards-backlog-structure.md","title":"Note 4: Azure Boards Backlog Structure","description":"Small 1 Team Projects","date":"2025-02-11T09:30:00.000Z","tags":[],"readingTime":1.565,"hasTruncateMarker":false,"authors":[{"name":"Ivan Ignatiev","socials":{"x":"https://x.com/ivan_ignatiev","github":"https://github.com/ivanignatiev","linkedin":"https://www.linkedin.com/in/ivan-ignatiev/"},"imageURL":"https://github.com/ivanignatiev.png","key":"ivanignatiev","page":null}],"frontMatter":{"slug":"azure-boards-backlog-structure","title":"Note 4: Azure Boards Backlog Structure","authors":"ivanignatiev","tags":[],"date":"2025-02-11T09:30"},"unlisted":false,"prevItem":{"title":"Note 5: Boost Python Pipelines Speed by 3-5x","permalink":"/azure-devops-container-jobs.md"},"nextItem":{"title":"Note 3: Azure Schedulers","permalink":"/azure-schedulers"}},"content":"## Small 1 Team Projects\\n\\nUse default or customized SCRUM process. Optionally customize status (e.g., \\"Proposed\u201d \u2192 \\"To Do,\u201d \\"Committed\u201d \u2192 \\"In Progress,\u201d \\"Done\u201d remains \\"Done\u201d) and add custom fields to explicit product components.\\n\\nBelow is a backlog structure, which you can easily visualize in Delivery Plans, to maintain flexibility for reporting:\\n\\n1. Product track:\\n\\n- **Epic**: formalize an objective in SMART way, description with \\"Why?\\"; when versioning lifecycle is well defined, the Epic can be as simple as \\"Product v10\\"\\n- **Feature**: describe concrete deliverable which can require multiple sprints to deliver, which could have any external dependencies, or which could require multiple team members to collaborate (\\"AI App for Model X\\" can take effort from API + Data & AI + UI)\\n- **PBI**: 1 sprint concrete deliverable with 1 concrete responsible person (\\"1 REST API Endpoint to call model prediction\\" - API deliverable with Lead assigned, \\"Prediction visualizations X, Y, Z\\" - UI deliverable with Lead assigned, etc.)\\n- **Task** (Optional): Tasks help explicit dependencies within PBI which requires multiple persons to collaborate \\n\\n2. Continuous tracks (i.e. ideas, quality or tech debt):\\n\\n- Epic as a bucket\\n- PBI for ideas and tech debt\\n- Bugs for quality issues\\n\\nPersonally, I like [Migration](https://bulletjournal.com/blogs/faq/migration) idea of bullet journal for refinement. If objective is changed, recreate a structure from Epic to Task. If more fine-grained tracking tracking is required, the items can be moved and reformulated to keep the same work item ID and change history.\\n\\nAvoid process over-engineering and adopt the level of details to team\'s context. Here is some ideas how to do it: [Principles over Process - svpg](https://www.svpg.com/principles-over-process/)\\n\\n## References\\n\\nBest courses:\\n\\n- [Alan Slater - Build & Manage your Requirements Backlog in Azure Devops](https://www.udemy.com/course/azure-devops-build-and-manage-your-requirements-backlog/?couponCode=JUST4U02223)\\n- [Alan Slater - Agile Requirements Mastery: Essential skills in just 2 hours](https://www.udemy.com/course/write-great-agile-requirements-in-just-118-minutes/?couponCode=JUST4U02223)\\n\\nAI to break up tasks in smaller peaces:\\n\\n- [goblin tools](https://goblin.tools/)"},{"id":"azure-schedulers","metadata":{"permalink":"/azure-schedulers","source":"@site/blog/note0003-azure-schedulers.md","title":"Note 3: Azure Schedulers","description":"CronJob in Azure Kubernetes Services (AKS)","date":"2025-01-25T09:30:00.000Z","tags":[],"readingTime":0.255,"hasTruncateMarker":false,"authors":[{"name":"Ivan Ignatiev","socials":{"x":"https://x.com/ivan_ignatiev","github":"https://github.com/ivanignatiev","linkedin":"https://www.linkedin.com/in/ivan-ignatiev/"},"imageURL":"https://github.com/ivanignatiev.png","key":"ivanignatiev","page":null}],"frontMatter":{"slug":"azure-schedulers","title":"Note 3: Azure Schedulers","authors":"ivanignatiev","tags":[],"date":"2025-01-25T09:30"},"unlisted":false,"prevItem":{"title":"Note 4: Azure Boards Backlog Structure","permalink":"/azure-boards-backlog-structure"},"nextItem":{"title":"Note 2: Learning Git","permalink":"/learning-git"}},"content":"## CronJob in Azure Kubernetes Services (AKS)\\n\\n[Kubernetes - CronJob](https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/)\\n\\n## Time triggers for Azure Functions \\n\\n[Timer trigger for Azure Functions](https://learn.microsoft.com/en-us/azure/azure-functions/functions-bindings-timer)\\n\\n## Manage schedules in Azure Automation\\n\\n[Manage schedules in Azure Automation](https://learn.microsoft.com/en-us/azure/automation/shared-resources/schedules)\\n\\n## Schedules for recurring triggers in Azure Logic Apps workflows\\n\\n[Schedules for recurring triggers in Azure Logic Apps workflows](https://learn.microsoft.com/en-us/azure/logic-apps/concepts-schedule-automated-recurring-tasks-workflows)"},{"id":"learning-git","metadata":{"permalink":"/learning-git","source":"@site/blog/note0002-learning-git.md","title":"Note 2: Learning Git","description":"Git is the foundation of collaboration within any coding team today. It\u2019s a fundamental technical skill that can cause a daily pain if not mastered.","date":"2025-01-23T09:30:00.000Z","tags":[],"readingTime":0.69,"hasTruncateMarker":false,"authors":[{"name":"Ivan Ignatiev","socials":{"x":"https://x.com/ivan_ignatiev","github":"https://github.com/ivanignatiev","linkedin":"https://www.linkedin.com/in/ivan-ignatiev/"},"imageURL":"https://github.com/ivanignatiev.png","key":"ivanignatiev","page":null}],"frontMatter":{"slug":"learning-git","title":"Note 2: Learning Git","authors":"ivanignatiev","tags":[],"date":"2025-01-23T09:30"},"unlisted":false,"prevItem":{"title":"Note 3: Azure Schedulers","permalink":"/azure-schedulers"},"nextItem":{"title":"Note 1: Visual Communication Tools for Architecture","permalink":"/visual-communication-tools-for-architecture"}},"content":"Git is the foundation of collaboration within any coding team today. It\u2019s a fundamental technical skill that can cause a daily pain if not mastered.\\n\\n## Basics\\n\\n- Book: [O\'Reilly - Anna Skoulikari - Learning Git](https://learning.oreilly.com/library/view/learning-git/9781098133900/)\\n- Visual Tool: [Learn Git Branching](https://learngitbranching.js.org/)\\n- [Git Immersion](https://gitimmersion.com/index.html)\\n- [GitByBit](https://gitbybit.com/)\\n\\n## Advanced\\n\\nEverything which will help to apply this tool in the real world practice and establish a good style shared across all project contributors.\\n\\n- [ooloo.io github flow course](https://ooloo.io/project/github-flow/mindset)\\n- [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/)\\n- [Git flow](https://nvie.com/posts/a-successful-git-branching-model/)\\n- Best Practices for Git:\\n  - https://about.gitlab.com/topics/version-control/version-control-best-practices/\\n- Best Practices for GitHub:\\n  - https://docs.github.com/en/repositories/creating-and-managing-repositories/best-practices-for-repositories\\n  - https://dev.to/pwd9000/github-repository-best-practices-23ck\\n  - https://medium.com/datreeio/top-10-github-best-practices-for-developers-d6309a613227\\n- Best Practices for Azure Repos (Azure DevOps):\\n  - https://learn.microsoft.com/en-us/azure/devops/repos/git/git-branching-guidance?view=azure-devops\\n\\n## Transversal Resources\\n\\n- [Learn Git and GitHub roadmap](https://roadmap.sh/git-github)\\n- [Git recourses from awesome repository](https://github.com/sindresorhus/awesome?tab=readme-ov-file#development-environment)\\n- Free eBook: [Pro Git](https://git-scm.com/book/en/v2)\\n\\n## Tools\\n\\n- [GitHub Desktop](https://github.com/apps/desktop)\\n- [GitButler](https://gitbutler.com/)"},{"id":"visual-communication-tools-for-architecture","metadata":{"permalink":"/visual-communication-tools-for-architecture","source":"@site/blog/note0001-visual-communication-tools-for-architecture.md","title":"Note 1: Visual Communication Tools for Architecture","description":"This article focuses on visual tools to represent IT architectures and resources for those tools.","date":"2025-01-21T09:30:00.000Z","tags":[],"readingTime":1.12,"hasTruncateMarker":false,"authors":[{"name":"Ivan Ignatiev","socials":{"x":"https://x.com/ivan_ignatiev","github":"https://github.com/ivanignatiev","linkedin":"https://www.linkedin.com/in/ivan-ignatiev/"},"imageURL":"https://github.com/ivanignatiev.png","key":"ivanignatiev","page":null}],"frontMatter":{"slug":"visual-communication-tools-for-architecture","title":"Note 1: Visual Communication Tools for Architecture","authors":"ivanignatiev","tags":[],"date":"2025-01-21T09:30"},"unlisted":false,"prevItem":{"title":"Note 2: Learning Git","permalink":"/learning-git"}},"content":"This article focuses on visual tools to represent IT architectures and resources for those tools.\\n\\n## What I use\\n\\nTools for Ad-hoc communication, drafting, and wireframing:\\n\\n- https://excalidraw.com/\\n- https://www.figma.com/figjam/\\n- https://miro.com/\\n- https://xmind.app/ (MindMaps)\\n\\nTools to transform drafts to more presentable assets:\\n\\n- [draw.io](https://draw.io)\\n- [Microsoft Visio](https://www.microsoft.com/microsoft-365/visio/flowchart-software)\\n\\nTools for use in documentation (Diagrams as a Code):\\n\\n- [Mermaid Playground](https://www.mermaidchart.com/play)\\n\\n## What I use, As an Azure Consultant:\\n\\n- In Enterprise world many documentation is done with [Microsoft Visio](https://www.microsoft.com/microsoft-365/visio/flowchart-software)\\n- Azure Services Icons from [Azure-Design repository](https://github.com/David-Summers/Azure-Design)\\n- [Official Azure Icons from Microsoft](https://learn.microsoft.com/en-us/azure/architecture/icons/)  \\n- Visio files could be found in architectures from [Azure Architecture Center](https://learn.microsoft.com/en-us/azure/architecture/browse/)\\n\\n## Animations\\n\\ndraw.io support flow animations and they can be saved in SVG to get results like [this](https://github.com/ivanignatiev/azure-aks-cert-manager/blob/main/architecture/aks-ingress-encryption.drawio.svg).\\n\\n## Other\\n\\nTo make visual communication clear we need to decide on style and configure out tools:\\n\\n- Color scheme\\n- Rounding\\n- Fonts\\n\\nThat is why it is import to look around, analyze, and compare. When you look to graphic designer, photographer courses you you always find a section about \\"collecting inspirations\\", \\"observation and others work observation\\", \\"designer eye training\\".\\n\\nHere I like to maintain my collection for observability:\\n\\n- [Tools section in Awesome Software Architecture](https://github.com/simskij/awesome-software-architecture?tab=readme-ov-file#tools)\\n- [Principal Based Enterprise Architecture (PBEA) stencils](https://pbea.iankoenig.com/visio.php)\\n- [Archi - Archimate Tool](https://www.archimatetool.com/)\\n- [Eraser](https://www.eraser.io/)\\n- [PlantUML](https://plantuml.com/)\\n- [D2](https://d2lang.com/)\\n- [Ilograph](https://www.ilograph.com/)\\n- [C4 Model - Tooling](https://c4model.com/tooling)"}]}}')}}]);